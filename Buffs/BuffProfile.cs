using Decal.Adapter;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;

namespace DoThingsBot.Buffs {
    public enum BuffProfileType {
        BUFFBOT,
        BOT
    }

    public class BuffProfile {
        public string name = "";
        public List<string> aliases = new List<string>();
        public List<Spells.SpellClass> familyIds = new List<Spells.SpellClass>();
        public Dictionary<int, string> includedProfiles = new Dictionary<int, string>();
        public List<Spells.SpellClass> directFamilyIds = new List<Spells.SpellClass>();
        private bool isLoading = true;
        private string json = "";
        private bool isAutoGenerated = false;
        private BuffProfileType profileType = BuffProfileType.BUFFBOT;
        internal TreeStatsCharacter treeStatsProfile;

        bool isValid = false;

        public BuffProfile(string profileName) {
            Load(profileName);
        }

        public BuffProfile(string profileName, BuffProfileType type) {
            profileType = BuffProfileType.BOT;
            Load(profileName);
        }

        public BuffProfile(string name, Spells.SpellClass familyId) {
            this.name = name;
            familyIds.Add(familyId);
            directFamilyIds.Add(familyId);
            isValid = true;
            isAutoGenerated = true;
            isLoading = false;
        }

        public BuffProfile(string characterName, bool useTreeStats) {
            // TODO: urlencode?
            isLoading = true;
            name = characterName;
            isAutoGenerated = true;
            new Action(FetchTreeStatsProfile).BeginInvoke(OnTreeStatsProfileComplete, null);

            //new Newtonsoft.Json.Serialization.Action(FetchTreeStatsProfile).BeginInvoke(new AsyncCallback(OnTreeStatsProfileComplete), null);
        }

        public bool IsAutoGenerated() {
            return isAutoGenerated;
        }

        private void FetchTreeStatsProfile() {
            try {
                var url = string.Format(@"http://treestats.net/{0}/{1}.json?t={2}&client=DoThingsBot", CoreManager.Current.CharacterFilter.Server, name, DateTime.UtcNow.ToFileTimeUtc());

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Timeout = 5000;
                request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;

                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse()) {
                    using (Stream stream = response.GetResponseStream()) {
                        using (StreamReader reader = new StreamReader(stream)) {
                            json = reader.ReadToEnd();
                        }
                    }
                }
            }
            catch { }
        }

        private void OnTreeStatsProfileComplete(IAsyncResult result) {
            try {
                if (!string.IsNullOrEmpty(json)) {
                    try {
                        var profile = JsonConvert.DeserializeObject<TreeStatsCharacter>(json);
                        treeStatsProfile = profile;
                        foreach (var skill in profile.skills.Keys) {
                            if (profile.skills[skill]["training"] != "Unusable" && profile.skills[skill]["training"] != "Untrained") {
                                AddBuffForSkill(profile.skills[skill]["name"]);
                            }
                        }

                        isValid = true;
                    }
                    catch (Exception ex) { }
                }
            }
            catch (Exception ex) {
                Util.LogException(ex);
            }

            if (isValid) {
                familyIds.Add(Spells.SpellClass.AURA_OF_DEFENDER);
                familyIds.Add(Spells.SpellClass.AURA_OF_HERMETIC_LINK);
                familyIds.Add(Spells.SpellClass.STRENGTH);
                familyIds.Add(Spells.SpellClass.ENDURANCE);
                familyIds.Add(Spells.SpellClass.QUICKNESS);
                familyIds.Add(Spells.SpellClass.COORDINATION);
                familyIds.Add(Spells.SpellClass.FOCUS);
                familyIds.Add(Spells.SpellClass.WILLPOWER);
                familyIds.Add(Spells.SpellClass.IMPREGNABILITY);
                familyIds.Add(Spells.SpellClass.INVULNERABILITY);
                familyIds.Add(Spells.SpellClass.MAGIC_RESISTANCE);
                familyIds.Add(Spells.SpellClass.ARCANE_ENLIGHTENMENT);
                familyIds.Add(Spells.SpellClass.LEADERSHIP_MASTERY);
                familyIds.Add(Spells.SpellClass.FEALTY);
                familyIds.Add(Spells.SpellClass.SPRINT);
                familyIds.Add(Spells.SpellClass.REGENERATION);
                familyIds.Add(Spells.SpellClass.REJUVENATION);
                familyIds.Add(Spells.SpellClass.MANA_RENEWAL);
                familyIds.Add(Spells.SpellClass.ACID_PROTECTION);
                familyIds.Add(Spells.SpellClass.BLUDGEONING_PROTECTION);
                familyIds.Add(Spells.SpellClass.COLD_PROTECTION);
                familyIds.Add(Spells.SpellClass.LIGHTNING_PROTECTION);
                familyIds.Add(Spells.SpellClass.FIRE_PROTECTION);
                familyIds.Add(Spells.SpellClass.PIERCING_PROTECTION);
                familyIds.Add(Spells.SpellClass.BLADE_PROTECTION);
                familyIds.Add(Spells.SpellClass.ARMOR);
                familyIds.Add(Spells.SpellClass.ARCANUM_SALVAGING);
                familyIds.Add(Spells.SpellClass.JUMPING_MASTERY);

                // melee/missile chars
                if (familyIds.Contains(Spells.SpellClass.HEAVY_WEAPON_MASTERY) ||
                    familyIds.Contains(Spells.SpellClass.LIGHT_WEAPON_MASTERY) ||
                    familyIds.Contains(Spells.SpellClass.TWO_HANDED_COMBAT_MASTERY) ||
                    familyIds.Contains(Spells.SpellClass.FINESSE_WEAPON_MASTERY) ||
                    familyIds.Contains(Spells.SpellClass.MISSILE_WEAPON_MASTERY)) {
                    familyIds.Add(Spells.SpellClass.AURA_OF_HEART_SEEKER);
                    familyIds.Add(Spells.SpellClass.AURA_OF_BLOOD_DRINKER);
                    familyIds.Add(Spells.SpellClass.AURA_OF_SWIFT_KILLER);
                }

                // war mages
                if (familyIds.Contains(Spells.SpellClass.WAR_MAGIC_MASTERY)) {
                    familyIds.Add(Spells.SpellClass.AURA_OF_SPIRIT_DRINKER);
                }

                // shield banes
                if (familyIds.Contains(Spells.SpellClass.SHIELD_MASTERY)) {
                    familyIds.Add(Spells.SpellClass.ACID_BANE);
                    familyIds.Add(Spells.SpellClass.BLUDGEON_BANE);
                    familyIds.Add(Spells.SpellClass.FROST_BANE);
                    familyIds.Add(Spells.SpellClass.LIGHTNING_BANE);
                    familyIds.Add(Spells.SpellClass.FLAME_BANE);
                    familyIds.Add(Spells.SpellClass.PIERCING_BANE);
                    familyIds.Add(Spells.SpellClass.BLADE_BANE);
                }
            }

            isLoading = false;
        }

        private void AddBuffForSkill(string skill) {
            switch (skill) {
                case "item_tinkering":
                    familyIds.Add(Spells.SpellClass.ITEM_TINKERING_EXPERTISE);
                    break;
                case "deception":
                    familyIds.Add(Spells.SpellClass.DECEPTION_MASTERY);
                    break;
                case "healing":
                    familyIds.Add(Spells.SpellClass.HEALING_MASTERY);
                    break;
                case "lockpick":
                    familyIds.Add(Spells.SpellClass.LOCKPICK_MASTERY);
                    break;
                case "weapon_tinkering":
                    familyIds.Add(Spells.SpellClass.WEAPON_TINKERING_EXPERTISE);
                    break;
                case "armor_tinkering":
                    familyIds.Add(Spells.SpellClass.ARMOR_TINKERING_EXPERTISE);
                    break;
                case "magic_item_tinkering":
                    familyIds.Add(Spells.SpellClass.MAGIC_ITEM_TINKERING_EXPERTISE);
                    break;
                case "creature_enchantment":
                    familyIds.Add(Spells.SpellClass.CREATURE_ENCHANTMENT_MASTERY);
                    break;
                case "item_enchantment":
                    familyIds.Add(Spells.SpellClass.ITEM_ENCHANTMENT_MASTERY);
                    break;
                case "life_magic":
                    familyIds.Add(Spells.SpellClass.LIFE_MAGIC_MASTERY);
                    break;
                case "war_magic":
                    familyIds.Add(Spells.SpellClass.WAR_MAGIC_MASTERY);
                    break;
                case "fletching":
                    familyIds.Add(Spells.SpellClass.FLETCHING_MASTERY);
                    break;
                case "alchemy":
                    familyIds.Add(Spells.SpellClass.ALCHEMY_MASTERY);
                    break;
                case "cooking":
                    familyIds.Add(Spells.SpellClass.COOKING_MASTERY);
                    break;
                case "two_handed_combat":
                    familyIds.Add(Spells.SpellClass.TWO_HANDED_COMBAT_MASTERY);
                    break;
                case "void_magic":
                    familyIds.Add(Spells.SpellClass.VOID_MAGIC_MASTERY);
                    break;
                case "heavy_weapons":
                    familyIds.Add(Spells.SpellClass.HEAVY_WEAPON_MASTERY);
                    break;
                case "light_weapons":
                    familyIds.Add(Spells.SpellClass.LIGHT_WEAPON_MASTERY);
                    break;
                case "finesse_weapons":
                    familyIds.Add(Spells.SpellClass.FINESSE_WEAPON_MASTERY);
                    break;
                case "missile_weapons":
                    familyIds.Add(Spells.SpellClass.MISSILE_WEAPON_MASTERY);
                    break;
                case "shield":
                    familyIds.Add(Spells.SpellClass.SHIELD_MASTERY);
                    break;
                case "dual_wield":
                    familyIds.Add(Spells.SpellClass.DUAL_WIELD_MASTERY);
                    break;
                case "recklessness":
                    familyIds.Add(Spells.SpellClass.RECKLESSNESS_MASTERY);
                    break;
                case "sneak_attack":
                    familyIds.Add(Spells.SpellClass.SNEAK_ATTACK_MASTERY);
                    break;
                case "dirty_fighting":
                    familyIds.Add(Spells.SpellClass.DIRTY_FIGHTING_MASTERY);
                    break;
                case "summoning":
                    familyIds.Add(Spells.SpellClass.SUMMONING_MASTERY);
                    break;
                case "mana_conversion":
                    familyIds.Add(Spells.SpellClass.MANA_CONVERSION_MASTERY);
                    break;
            }
        }

        public bool IsLoaded() {
            return !isLoading;
        }

        public bool IsValid() {
            return isValid;
        }

        public void LoadIncluded() {
            var pKeyOffset = 0;
            List<int> pKeys = new List<int>();

            if (isLoading == false) return;

            foreach (var pKey in includedProfiles.Keys) {
                pKeys.Add(pKey);
            }

            pKeys.Sort();

            foreach (var pKey in pKeys) {
                var profile = includedProfiles[pKey];
                var buffProfile = Buffs.GetProfile(profile);

                if (buffProfile == null) {
                    Util.WriteToChat(string.Format("Could not include profile {0} while generating {1}", profile, name));
                    continue;
                }

                buffProfile.LoadIncluded();

                var bFamilyIds = buffProfile.familyIds;
                bFamilyIds.Reverse();

                foreach (var familyId in bFamilyIds) {
                    if (!familyIds.Contains(familyId)) {
                        familyIds.Add(familyId);
                        pKeyOffset++;
                    }
                }
            }

            isLoading = false;
        }

        private void Load(string profileName) {
            var path = "";

            if (profileType == BuffProfileType.BOT) {
                path = Buffs.GetBotProfilePath(profileName);
            }
            else {
                path = Buffs.GetProfilePath(profileName);
            }

            if (!File.Exists(path)) {
                isValid = false;
                Util.WriteToChat("Invalid profile: " + profileName + ": " + path);
                return;
            }

            try {
                XmlDocument doc = new XmlDocument();
                doc.Load(path);

                if (doc.DocumentElement.Attributes["aliases"] != null) {
                    var definedAliases = doc.DocumentElement.Attributes["aliases"].InnerText;
                    aliases.AddRange(definedAliases.Split(' '));
                }
                name = profileName;
                var index = 0;

                foreach (XmlNode node in doc.DocumentElement.ChildNodes) {
                    Spells.SpellClass spellClass = Spells.SpellClass.UNKNOWN;

                    try {
                        if (node.Attributes["family"] != null && node.Attributes["family"].InnerText.Length > 0) {
                            spellClass = (Spells.SpellClass)System.Enum.Parse(typeof(Spells.SpellClass), node.Attributes["family"].InnerText);
                        }
                        else if (node.Attributes["profile"] != null && node.Attributes["profile"].InnerText.Length > 0) {
                            includedProfiles.Add(index, node.Attributes["profile"].InnerText);

                            index++;
                            continue;
                        }
                    }
                    catch (Exception ex) { }

                    if (spellClass != Spells.SpellClass.UNKNOWN) {
                        if (!familyIds.Contains(spellClass)) {
                            familyIds.Add(spellClass);
                        }
                        if (!directFamilyIds.Contains(spellClass)) {
                            directFamilyIds.Add(spellClass);
                        }
                        index++;
                        isValid = true;
                    }
                }
            }
            catch (Exception ex) { Util.LogException(ex); }
        }
    }
}
